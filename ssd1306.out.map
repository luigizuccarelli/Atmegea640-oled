Archive member included to satisfy reference by file (symbol)

/usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/crtatmega640.o (exit)
/usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_copy_data.o)
                              main.o (__do_copy_data)
/usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/libc.a(memset.o)
                              ssd1306.o (memset)

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000020000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000003 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
user_signatures  0x0000000000850000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

Address of section .data set to 0x800200
LOAD /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/crtatmega640.o
LOAD /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/libm.a
LOAD main.o
LOAD ssd1306.o
LOAD ssd1306_spi.o
START GROUP
LOAD /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a
LOAD /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/libm.a
LOAD /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/libc.a
LOAD /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/libatmega640.a
END GROUP
                0x0000000000020000                __TEXT_REGION_LENGTH__ = DEFINED (__TEXT_REGION_LENGTH__)?__TEXT_REGION_LENGTH__:0x20000
                0x000000000000ffa0                __DATA_REGION_LENGTH__ = DEFINED (__DATA_REGION_LENGTH__)?__DATA_REGION_LENGTH__:0xffa0
                0x0000000000010000                __EEPROM_REGION_LENGTH__ = DEFINED (__EEPROM_REGION_LENGTH__)?__EEPROM_REGION_LENGTH__:0x10000
                [0x0000000000000003]                __FUSE_REGION_LENGTH__ = DEFINED (__FUSE_REGION_LENGTH__)?__FUSE_REGION_LENGTH__:0x400
                0x0000000000000400                __LOCK_REGION_LENGTH__ = DEFINED (__LOCK_REGION_LENGTH__)?__LOCK_REGION_LENGTH__:0x400
                0x0000000000000400                __SIGNATURE_REGION_LENGTH__ = DEFINED (__SIGNATURE_REGION_LENGTH__)?__SIGNATURE_REGION_LENGTH__:0x400
                0x0000000000000400                __USER_SIGNATURE_REGION_LENGTH__ = DEFINED (__USER_SIGNATURE_REGION_LENGTH__)?__USER_SIGNATURE_REGION_LENGTH__:0x400

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0xb6e
 *(.vectors)
 .vectors       0x0000000000000000       0xe4 /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/crtatmega640.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
                0x00000000000000e4                . = ALIGN (0x2)
                0x00000000000000e4                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x00000000000000e4        0x0 linker stubs
 *(.trampolines*)
                0x00000000000000e4                __trampolines_end = .
 *libprintf_flt.a:*(.progmem.data)
 *libc.a:*(.progmem.data)
 *(.progmem.*)
                0x00000000000000e4                . = ALIGN (0x2)
 *(.lowtext)
 *(.lowtext*)
                0x00000000000000e4                __ctors_start = .
 *(.ctors)
                0x00000000000000e4                __ctors_end = .
                0x00000000000000e4                __dtors_start = .
 *(.dtors)
                0x00000000000000e4                __dtors_end = .
 SORT_BY_NAME(*)(.ctors)
 SORT_BY_NAME(*)(.dtors)
 *(.init0)
 .init0         0x00000000000000e4        0x0 /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/crtatmega640.o
                0x00000000000000e4                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x00000000000000e4        0xc /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/crtatmega640.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x00000000000000f0       0x16 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_copy_data.o)
                0x00000000000000f0                __do_copy_data
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x0000000000000106        0x8 /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/crtatmega640.o
 *(.init9)
 *(.text)
 .text          0x000000000000010e        0x4 /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/crtatmega640.o
                0x000000000000010e                __vector_38
                0x000000000000010e                __vector_22
                0x000000000000010e                __vector_28
                0x000000000000010e                __vector_1
                0x000000000000010e                __vector_32
                0x000000000000010e                __vector_34
                0x000000000000010e                __vector_24
                0x000000000000010e                __vector_12
                0x000000000000010e                __vector_55
                0x000000000000010e                __vector_46
                0x000000000000010e                __bad_interrupt
                0x000000000000010e                __vector_6
                0x000000000000010e                __vector_31
                0x000000000000010e                __vector_35
                0x000000000000010e                __vector_39
                0x000000000000010e                __vector_3
                0x000000000000010e                __vector_23
                0x000000000000010e                __vector_30
                0x000000000000010e                __vector_45
                0x000000000000010e                __vector_25
                0x000000000000010e                __vector_11
                0x000000000000010e                __vector_54
                0x000000000000010e                __vector_13
                0x000000000000010e                __vector_17
                0x000000000000010e                __vector_19
                0x000000000000010e                __vector_56
                0x000000000000010e                __vector_7
                0x000000000000010e                __vector_49
                0x000000000000010e                __vector_41
                0x000000000000010e                __vector_43
                0x000000000000010e                __vector_27
                0x000000000000010e                __vector_5
                0x000000000000010e                __vector_33
                0x000000000000010e                __vector_47
                0x000000000000010e                __vector_52
                0x000000000000010e                __vector_37
                0x000000000000010e                __vector_4
                0x000000000000010e                __vector_44
                0x000000000000010e                __vector_51
                0x000000000000010e                __vector_9
                0x000000000000010e                __vector_2
                0x000000000000010e                __vector_21
                0x000000000000010e                __vector_15
                0x000000000000010e                __vector_36
                0x000000000000010e                __vector_29
                0x000000000000010e                __vector_40
                0x000000000000010e                __vector_8
                0x000000000000010e                __vector_26
                0x000000000000010e                __vector_48
                0x000000000000010e                __vector_14
                0x000000000000010e                __vector_53
                0x000000000000010e                __vector_10
                0x000000000000010e                __vector_50
                0x000000000000010e                __vector_16
                0x000000000000010e                __vector_18
                0x000000000000010e                __vector_20
                0x000000000000010e                __vector_42
 .text          0x0000000000000112      0x146 main.o
                0x0000000000000112                SSD1306_init
 .text          0x0000000000000258      0x3b6 ssd1306.o
                0x0000000000000258                ssd1306_display_text
                0x0000000000000300                ssd1306_clear_screen
                0x0000000000000384                ssd1306_clear_line
                0x00000000000003ee                ssd1306_contrast
                0x0000000000000402                ssd1306_software_scroll
                0x000000000000045c                ssd1306_scroll_clear
                0x00000000000004c8                ssd1306_hardware_scroll
                0x00000000000004dc                ssd1306_invert
                0x00000000000004f6                ssd1306_rotate
                0x0000000000000510                ssd1306_flip
                0x000000000000053e                ssd1306_fadeout
 .text          0x000000000000060e      0x4ba ssd1306_spi.o
                0x000000000000060e                set_as_output
                0x0000000000000626                set_as_input
                0x0000000000000640                set_high
                0x0000000000000656                set_low
                0x000000000000066e                spi_init
                0x0000000000000700                spi_transfer
                0x000000000000078a                spi_master_write_data
                0x00000000000007b6                spi_master_write_command
                0x00000000000007e2                spi_display_text
                0x0000000000000878                device_init
                0x000000000000099e                spi_contrast
                0x00000000000009d6                spi_hardware_scroll
 .text          0x0000000000000ac8        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_exit.o)
 .text          0x0000000000000ac8        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_copy_data.o)
 .text          0x0000000000000ac8        0x0 /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/libc.a(memset.o)
                0x0000000000000ac8                . = ALIGN (0x2)
 *(.text.*)
 .text.startup  0x0000000000000ac8       0x94 main.o
                0x0000000000000ac8                main
 .text.libgcc.mul
                0x0000000000000b5c        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_exit.o)
 .text.libgcc.div
                0x0000000000000b5c        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_exit.o)
 .text.libgcc   0x0000000000000b5c        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x0000000000000b5c        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x0000000000000b5c        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x0000000000000b5c        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_exit.o)
 .text.libgcc.fixed
                0x0000000000000b5c        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x0000000000000b5c        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.div
                0x0000000000000b5c        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_copy_data.o)
 .text.libgcc   0x0000000000000b5c        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.prologue
                0x0000000000000b5c        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.builtins
                0x0000000000000b5c        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.fmul
                0x0000000000000b5c        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_copy_data.o)
 .text.libgcc.fixed
                0x0000000000000b5c        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_copy_data.o)
 .text.avr-libc
                0x0000000000000b5c        0xe /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/libc.a(memset.o)
                0x0000000000000b5c                memset
                0x0000000000000b6a                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x0000000000000b6a        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_exit.o)
                0x0000000000000b6a                exit
                0x0000000000000b6a                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x0000000000000b6a        0x4 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_exit.o)
 *(.fini0)
 *(.hightext)
 *(.hightext*)
 *(.progmemx.*)
                0x0000000000000b6e                . = ALIGN (0x2)
 *(.jumptables)
 *(.jumptables*)
                0x0000000000000b6e                _etext = .

.data           0x0000000000800200      0x44a load address 0x0000000000000b6e
                0x0000000000800200                PROVIDE (__data_start = .)
 *(.data)
 .data          0x0000000000800200        0x0 /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/crtatmega640.o
 .data          0x0000000000800200        0x0 main.o
 .data          0x0000000000800200        0x0 ssd1306.o
 .data          0x0000000000800200        0x0 ssd1306_spi.o
 .data          0x0000000000800200        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_exit.o)
 .data          0x0000000000800200        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_copy_data.o)
 .data          0x0000000000800200        0x0 /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/libc.a(memset.o)
 *(.data*)
 *(.gnu.linkonce.d*)
 *(.rodata)
 .rodata        0x0000000000800200      0x400 ssd1306.o
 *(.rodata*)
 .rodata.str1.1
                0x0000000000800600       0x4a main.o
 *(.gnu.linkonce.r*)
                0x000000000080064a                . = ALIGN (0x2)
                0x000000000080064a                _edata = .
                0x000000000080064a                PROVIDE (__data_end = .)

.bss            0x000000000080064a        0x0
                [!provide]                        PROVIDE (__bss_start = .)
 *(.bss)
 .bss           0x000000000080064a        0x0 /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/crtatmega640.o
 .bss           0x000000000080064a        0x0 main.o
 .bss           0x000000000080064a        0x0 ssd1306.o
 .bss           0x000000000080064a        0x0 ssd1306_spi.o
 .bss           0x000000000080064a        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_exit.o)
 .bss           0x000000000080064a        0x0 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_copy_data.o)
 .bss           0x000000000080064a        0x0 /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/libc.a(memset.o)
 *(.bss*)
 *(COMMON)
                [!provide]                        PROVIDE (__bss_end = .)
                0x0000000000000b6e                __data_load_start = LOADADDR (.data)
                0x0000000000000fb8                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x000000000080064a        0x0
                [!provide]                        PROVIDE (__noinit_start = .)
 *(.noinit*)
                [!provide]                        PROVIDE (__noinit_end = .)
                0x000000000080064a                _end = .
                [!provide]                        PROVIDE (__heap_start = .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000     0x17ac
 *(.stab)
 .stab          0x0000000000000000      0x348 main.o
 .stab          0x0000000000000348      0x990 ssd1306.o
                                        0x99c (size before relaxing)
 .stab          0x0000000000000cd8      0x990 ssd1306_spi.o
                                        0x99c (size before relaxing)
 .stab          0x0000000000001668       0x6c /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_exit.o)
                                         0x78 (size before relaxing)
 .stab          0x00000000000016d4       0xd8 /usr/lib/gcc/avr/10.2.0/avr5/libgcc.a(_copy_data.o)
                                         0xe4 (size before relaxing)

.stabstr        0x0000000000000000      0xe5c
 *(.stabstr)
 .stabstr       0x0000000000000000      0xe5c main.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x23
 *(.comment)
 .comment       0x0000000000000000       0x23 main.o
                                         0x24 (size before relaxing)
 .comment       0x0000000000000023       0x24 ssd1306.o
 .comment       0x0000000000000023       0x24 ssd1306_spi.o

.note.gnu.avr.deviceinfo
                0x0000000000000000       0x3c
 .note.gnu.avr.deviceinfo
                0x0000000000000000       0x3c /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/crtatmega640.o

.note.gnu.build-id
 *(.note.gnu.build-id)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info     0x0000000000000000      0xba9
 *(.debug_info .gnu.linkonce.wi.*)
 .debug_info    0x0000000000000000      0xba9 /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/crtatmega640.o

.debug_abbrev   0x0000000000000000      0xb08
 *(.debug_abbrev)
 .debug_abbrev  0x0000000000000000      0xb08 /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/crtatmega640.o

.debug_line     0x0000000000000000       0x1d
 *(.debug_line .debug_line.* .debug_line_end)
 .debug_line    0x0000000000000000       0x1d /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/crtatmega640.o

.debug_frame
 *(.debug_frame)

.debug_str      0x0000000000000000      0x3e0
 *(.debug_str)
 .debug_str     0x0000000000000000      0x3e0 /usr/lib/gcc/avr/10.2.0/../../../../avr/lib/avr5/crtatmega640.o

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)

.debug_weaknames
 *(.debug_weaknames)

.debug_funcnames
 *(.debug_funcnames)

.debug_typenames
 *(.debug_typenames)

.debug_varnames
 *(.debug_varnames)

.debug_pubtypes
 *(.debug_pubtypes)

.debug_ranges
 *(.debug_ranges)

.debug_macro
 *(.debug_macro)

.debug_addr
 *(.debug_addr)
OUTPUT(ssd1306.out elf32-avr)
LOAD linker stubs
